class HDMagic_SpellMixer : HDWeapon {
	HDMagic_MagicController tracker;
	HDPlayerPawn ownr;
	int choice;
	int gRobustness, gIncrementDecrement, gProjection, gHeat, gPower, gTime, gGravity, gImbue;
	//array<glyphtargets[8]> { "Robustness" , "Heat" , "Gravity" , "Increment" , "Power" , "Decrement" , "Projection" , "Time" , "Imbue" };
	default {
		Scale 0.5;
		Inventory.PickupMessage "Picked up a book.";
		Inventory.Icon "PLSEA0";
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
		+INVENTORY.UNDROPPABLE;
	}


	override void DoEffect() {
		//Makes the book count mana instead of itself but only update every second
		self.tracker = HDMagic_MagicController(FindInventory("HDMagic_MagicController", false));
		if(level.time % 35 == 1) {
			amount = self.tracker.mana;
		}
		super.DoEffect();
	}
	override void PostBeginPlay(){
		super.PostBeginPlay();
	}
	action string A_Choose() {
		invoker.choice = GetPlayerInput(MODINPUT_BUTTONS);
		if(invoker.choice & BT_MOVELEFT && invoker.choice & BT_FORWARD) {
			return "Robustness";
		}
		else if(invoker.choice & BT_MOVERIGHT && invoker.choice & BT_FORWARD) {
			return "Projection";
		}
		else if(invoker.choice & BT_MOVELEFT && invoker.choice & BT_BACK) {
			return "Gravity";
		}
		else if(invoker.choice & BT_MOVERIGHT && invoker.choice & BT_Back) {
			return "Imbue";
		}
		else if(invoker.choice & BT_FORWARD) {
			return "Increment";
		}
		else if(invoker.choice & BT_BACK) {
			return "Decrement";
		}
		else if(invoker.choice & BT_MOVELEFT) {
			return "Heat";
		}
		else if(invoker.choice & BT_MOVERIGHT) {
			return "Time";
		}
		else{ return "Power";}
	}
//
	action void A_Display() {
		A_WeaponMessage(string.format("Aur %i Aby %i Can %i \nCet %i At %i  Sku %i \nCen %i Bet %i Eri %i", invoker.owner.CountInv("HDMagic_GlyphRobustness"), invoker.owner.CountInv("HDMagic_GlyphIncrement"), invoker.owner.CountInv("HDMagic_GlyphProjection"), invoker.owner.CountInv("HDMagic_GlyphHeat"), invoker.owner.CountInv("HDMagic_GlyphPower"), invoker.owner.CountInv("HDMagic_GlyphTime"), invoker.owner.CountInv("HDMagic_GlyphGravity"), invoker.owner.CountInv("HDMagic_GlyphDecrement"), invoker.owner.CountInv("HDMagic_GlyphImbue")));
	
	}
	
	action void A_CastNow() {
		
		invoker.gRobustness = invoker.owner.countinv("HDMagic_GlyphRobustness");
		invoker.gHeat = invoker.owner.countinv("HDMagic_GlyphHeat");
		invoker.gGravity = invoker.owner.countinv("HDMagic_GlyphGravity");
		invoker.gIncrementDecrement = invoker.owner.countinv("HDMagic_GlyphIncrement") - invoker.owner.countinv("HDMagic_GlyphDecrement");
		invoker.gPower = invoker.owner.countinv("HDMagic_GlyphPower");
		invoker.gProjection = invoker.owner.countinv("HDMagic_GlyphProjection");
		invoker.gTime = invoker.owner.countinv("HDMagic_GlyphTime");
		invoker.gImbue = invoker.owner.countinv("HDMagic_GlyphImbue");
		string classname = string.format("HDMagic_Spell%i%i%i%i%i", invoker.gRobustness, invoker.gHeat, invoker.gGravity, invoker.gTime, invoker.gImbue);
		class<actor> classtype = classname;
	
	}

	
	action void A_Increase() {
		invoker.owner.GiveInventory(string.format("HDMagic_Glyph%s", A_Choose()), 1);
	}
	action void A_Decrease() {
		invoker.owner.TakeInventory(string.format("HDMagic_Glyph%s", A_Choose()), 1);
	}
	States {
	Ready:
		PUNG A 1 A_WeaponReady(WRF_ALL);
		PUNG A 1 A_Display;
		Loop;
	Deselect:
		PUNG A 1 A_Lower;
		Loop;
	Select:
		PUNG A 1 A_Raise;
		Loop;
	Fire:
		TNT1 A 4 A_Increase;
		Goto updateGlyphs;
	AltFire:
		TNT1 A 4 A_Decrease;
		Goto updateGlyphs;
	reload:
		TNT1 A 4 A_Increase;
		Goto Ready;
	zoom:
		TNT1 A 4 A_Decrease;
		Goto Ready;
	updateGlyphs:
		TNT1 A 1 A_Display;
		Goto Ready;
	}
}