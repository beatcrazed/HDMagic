class HDMagic_MagicBook : HDWeapon {
	HDMagic_MagicController tracker;
	HDPlayerPawn ownr;
	
	

	default {
		Scale 0.5;
		Inventory.PickupMessage "Picked up a book.";
		Inventory.Icon "TFOGJ0";
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
		+INVENTORY.UNDROPPABLE;
	}
	
	override void DoEffect() {
		//Makes the book count mana instead of itself but only update every second
		self.tracker = HDMagic_MagicController(FindInventory("HDMagic_MagicController", false));
		if(level.time % 35 == 1) {
			amount = self.tracker.mana;
		}
		super.DoEffect();
	}
	States {
	Ready:
		PUNG A 1 A_WeaponReady(WRF_ALL);
		Loop;
	Deselect:
		PUNG A 1 A_Lower;
		Loop;
	Select:
		PUNG A 1 A_Raise;
		Loop;
	Fire:
		PUNG B 4;
		PUNG C 4 A_Punch;
		PUNG D 5;
		PUNG C 4;
		PUNG B 5;
		Goto Ready;
	AltFire:
		PUNG B 2;
		TNT1 A 1 A_FirePlasma;
		PUNG C 2;
		Goto Ready;
	unload:
		PUNG B 50;
		Goto Ready;
	reload:
		PUNG B 5;
		TNT1 A 30 A_Heal;
		Goto Ready;
	zoom:
		TNT1 A 30 A_Feather;
		Goto Ready;
	}
	action void A_Heal()
	{
		if (player != null)
		{
			invoker.tracker = HDMagic_MagicController(FindInventory("HDMagic_MagicController", false));
			let ownr = HDPlayerPawn(invoker.owner);
			A_FireProjectile("HDMagic_DoorBuster");

		}
	}
	action void A_Feather()
	{
		invoker.tracker = HDMagic_MagicController(FindInventory("HDMagic_MagicController", false));
		let ownr = HDPlayerPawn(invoker.owner);
		ownr.giveinventory("HDMagic_SpellRegeneration", 1);
	}
	action void A_Punch()
	{
		FTranslatedLineTarget t;

		if (player != null)
		{
			Weapon weap = player.ReadyWeapon;
			if (weap != null && !weap.bDehAmmo && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
			{
				if (!weap.DepleteAmmo (weap.bAltFire))
					return;
			}
		}

		int damage = random[Punch](50, 120) << 1;
		invoker.tracker = HDMagic_MagicController(FindInventory("HDMagic_MagicController", false));
		let ownr = HDPlayerPawn(invoker.owner);
		invoker.tracker.antimana += 5;
		invoker.tracker.mana -= 50;
		ownr.zerk += 2000;
		if (FindInventory("PowerStrength"))
			damage *= 10;

		double ang = angle + Random2[Punch]() * (5.625 / 256);
		double pitch = AimLineAttack (ang, DEFMELEERANGE, null, 0., ALF_CHECK3D);

		LineAttack (ang, DEFMELEERANGE, pitch, damage, 'BaleFire', "BulletPuff", LAF_ISMELEEATTACK, t);

		// turn to face target
		if (t.linetarget)
		{
			A_PlaySound ("*fist", CHAN_WEAPON);
			angle = t.angleFromSource;
		}
	}
	action void A_FirePlasma()
	{
		if (player == null)
		{
			return;
		}
		invoker.tracker = HDMagic_MagicController(FindInventory("HDMagic_MagicController", false));
		invoker.tracker.mana -= 2;
		Weapon weap = player.ReadyWeapon;
		double ptch = pitch;
		for (int prjnum = 0; prjnum < 10; prjnum++) {
			A_FireProjectile("MageImpBall",frandom(-10,10),pitch=ptch+frandom(-10,10));
			pitch = ptch;
		}
	}
	
}

class HDMagic_FeatherToken : HDPickup
{
	HDPlayerPawn ownr;
	int maxduration;
	int currentduration;
	
	default {
		Scale 0.5;
		Inventory.PickupMessage "The load feels lighter";
		Inventory.MaxAmount 10;
		hdpickup.bulk -100;
		-INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
		+inventory.autoactivate;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		currentduration = 0;
	}
	override void DoEffect() {
		maxduration = 2100;
		currentduration += 1;
		if(currentduration >= maxduration) {
			let ownr = HDPlayerPawn(owner);
			ownr.A_takeinventory("HDMagic_FeatherToken", 1);
			currentduration -= 1000;
		}
	}
}


class HDMagic_DoorBuster : HDImpBall
{
	States
	{
	death:
		BAL1 C 0{doordestroyer.destroydoor(self);}
		goto super::death;
	}
}