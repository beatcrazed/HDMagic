class HDMagic_MagicBook : HDWeapon {
	HDMagic_MagicController tracker;
	HDPlayerPawn ownr;
	
	

	default {
		Scale 0.5;
		Inventory.PickupMessage "Picked up a book.";
		Inventory.Icon "TFOGJ0";
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
	}
	
	override void DoEffect() {
		//Makes the book count mana instead of itself
		self.tracker = HDMagic_MagicController(FindInventory("HDMagic_MagicController", false));
		amount = self.tracker.mana;
		super.DoEffect();
	}
	States
	{
	Ready:
		PUNG A 1 A_WeaponReady(WRF_ALL);
		Loop;
	Deselect:
		PUNG A 1 A_Lower;
		Loop;
	Select:
		PUNG A 1 A_Raise;
		Loop;
	Fire:
		PUNG B 4;
		PUNG C 4 A_Punch;
		PUNG D 5;
		PUNG C 4;
		PUNG B 5;
		Goto Ready;
	AltFire:
		PUNG B 5;
		TNT1 A 1 A_FirePlasma;
		PUNG C 20;
		Goto Ready;
	reload:
		PUNG B 5;
		TNT1 A 30 A_Heal;
		Goto Ready;
	}
	action void A_Heal()
	{
		if (player != null)
		{
			player.health += 10;
			invoker.tracker = HDMagic_MagicController(FindInventory("HDMagic_MagicController", false));
			let ownr = HDPlayerPawn(invoker.owner);
			ownr.oldwoundcount -= 5;
			ownr.burncount -= 5;
			ownr.unstablewoundcount -= 5;
			ownr.aggravateddamage -= 2;
			ownr.woundcount -= 5;
			if(ownr.health + 10 <= ownr.maxhealth()) { ownr.health += 10; }
			else { ownr.health = ownr.maxhealth() ; }
			invoker.tracker.mana -= 30;
		}
	}

	action void A_Punch()
	{
		FTranslatedLineTarget t;

		if (player != null)
		{
			Weapon weap = player.ReadyWeapon;
			if (weap != null && !weap.bDehAmmo && invoker == weap && stateinfo != null && stateinfo.mStateType == STATE_Psprite)
			{
				if (!weap.DepleteAmmo (weap.bAltFire))
					return;
			}
		}

		int damage = random[Punch](6, 20) << 1;
		invoker.tracker = HDMagic_MagicController(FindInventory("HDMagic_MagicController", false));
		let ownr = HDPlayerPawn(invoker.owner);
		invoker.tracker.mana -= 10;
		ownr.giveinventory("HDMagic_FeatherToken", 1);
		if (FindInventory("PowerStrength"))
			damage *= 10;

		double ang = angle + Random2[Punch]() * (5.625 / 256);
		double pitch = AimLineAttack (ang, DEFMELEERANGE, null, 0., ALF_CHECK3D);

		LineAttack (ang, DEFMELEERANGE, pitch, damage, 'BaleFire', "BulletPuff", LAF_ISMELEEATTACK, t);

		// turn to face target
		if (t.linetarget)
		{
			A_PlaySound ("*fist", CHAN_WEAPON);
			angle = t.angleFromSource;
		}
	}
	action void A_FirePlasma()
	{
		if (player == null)
		{
			return;
		}
		invoker.tracker = HDMagic_MagicController(FindInventory("HDMagic_MagicController", false));
		invoker.tracker.mana -= 5;
		Weapon weap = player.ReadyWeapon;
		SpawnPlayerMissile ("Plasma");
	}
	
}

class HDMagic_FeatherToken : HDPickup
{
	HDPlayerPawn ownr;
	int maxduration;
	int currentduration;
	
	default {
		Scale 0.5;
		Inventory.PickupMessage "The load feels lighter";
		Inventory.MaxAmount 10;
		hdpickup.bulk -100;
		-INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
		+inventory.autoactivate;
	}
	override void PostBeginPlay() {
		super.PostBeginPlay();
		currentduration = 0;
	}
	override void DoEffect() {
		maxduration = 2100;
		currentduration += 1;
		if(currentduration >= maxduration) {
			let ownr = HDPlayerPawn(owner);
			ownr.A_takeinventory("HDMagic_FeatherToken", 1);
			currentduration -= 1000;
		}
	}
}


class Plasma : PlasmaBall
{
	Default
	{
		Scale 2.5;
		Radius 13;
		Height 8;
		Speed 25;
		Damage 200;
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 0.75;
		SeeSound "weapons/plasmaf";
		DeathSound "weapons/plasmax";
		Obituary "$OB_MPPLASMARIFLE";
	}
	States
	{
	Spawn:
		PLSS AB 6 Bright;
		Loop;
	Death:
		PLSE ABCDE 4 Bright;
		Stop;
	}
}