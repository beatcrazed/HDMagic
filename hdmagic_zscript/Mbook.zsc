class HDMagic_MagicBook : Ring {
	HDMagic_MagicController tracker;
	HDPlayerPawn ownr;
	
	

	default {
		Scale 0.5;
		Inventory.PickupMessage "Picked up a book.";
		Inventory.Icon "TFOGJ0";
		+INVENTORY.INVBAR;
		+INVENTORY.PERSISTENTPOWER;
		+INVENTORY.IGNORESKILL;
	}
	
	override void DoEffect() {
		//Makes the book count mana instead of itself
		self.tracker = HDMagic_MagicController(FindInventory("HDMagic_MagicController", false));
		amount = self.tracker.mana;
		super.DoEffect();
	}
	action void HDPunch(int dmg){
		let ownr = HDPlayerPawn(invoker.owner);
		if(hd_debug) { A_Log("manatee"); }
		invoker.tracker = HDMagic_MagicController(FindInventory("HDMagic_MagicController", false));
		ownr.fatigue += 3;
		ownr.bloodpressure += 10;
		ownr.oldwoundcount --;
		ownr.burncount --;
		invoker.tracker.mana -= 5;
		flinetracedata punchline;
		
		bool punchy=linetrace(
			angle,48,pitch,
			TRF_NOSKY,
			offsetz:height-12,
			data:punchline
		);
		if(!punchy)return;

		//actual puff effect if the shot connects
		LineAttack(angle,48,pitch,0,"none",
			countinv("PowerStrength")?"BulletPuffMedium":"BulletPuffSmall",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12
		);

		if(!punchline.hitactor)return;
		actor punchee=punchline.hitactor;

		//charge!
		if(invoker.flicked)dmg*=1.5;
		else dmg+=HDMath.TowardsEachOther(self,punchee)*2;

		//come in swinging
		let onr=hdplayerpawn(invoker.owner);
		if(onr){
			int iy=onr.iyaw;
			int ip=onr.ipitch;
			if(abs(ip)>abs(iy))iy=-ip;
			if(iy>0)iy*=100;
			else if(iy<0)iy*=200;
			dmg+=min(abs(iy),dmg*2);

			//need to be well grounded
			if(onr.zat<pos.z)dmg*=0.5;
		}

		//shit happens
		dmg*=frandom(0.6,1.6);


		//other effects
		if(
			onr&&(
				punchee.mass<200
				||(
					punchee.radius*2<punchee.height
					&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.6
				)
			)
		){
			if(abs(onr.iyaw)>0.5){
				punchee.A_SetAngle(punchee.angle-onr.iyaw*100,SPF_INTERPOLATE);
			}
			if(abs(onr.ipitch)>0.5){
				punchee.A_SetPitch(punchee.angle+onr.ipitch*100,SPF_INTERPOLATE);
			}
		}
		//headshot lol
		if(
			!punchee.bnopain
			&& punchee.health>0
			&& !(punchee is "KillerBarrel")
			&& punchee.findstate("pain")
			&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.75
		){
			if(hd_debug)A_Log("HEAD SHOT");
			punchee.setstatelabel("pain");
			dmg*=frandom(1.1,1.8);
		}

		if(hd_debug){
			string pch="";
			if(punchee.player)pch=punchee.player.getusername();
				else pch=punchee.getclassname();
			A_Log(string.format("Punched %s for %i damage!",pch,dmg));
		}
		if(dmg*2>punchee.health)punchee.A_PlaySound("misc/bulletflesh",CHAN_BODY);  
		if(punchee.health>0)punchee.damagemobj(self,self,dmg,"SmallArms0");
		else HDF.Give(punchee,"SawGib",dmg*0.2);

		if(!punchee)invoker.targethealth=0;else{
			invoker.targethealth=punchee.health;
			invoker.targetspawnhealth=punchee.spawnhealth();
			invoker.targettimer=0;
		}
	}	
		static void kick(actor kicker,actor kickee,actor kicking){
		kickee.A_PlaySound("weapons/smack",CHAN_BODY);
		bool kzk=kicker.countinv("PowerStrength");
		kickee.damagemobj(kicking,kicker,kzk?random(20,40):random(10,20),"bashing");
		if(kickee&&!kickee.bnopain&&kickee.health>0&&random(0,4))kickee.setstatelabel("pain");
		vector3 kickdir=(kickee.pos-kicker.pos).unit();
		if(kickee)kickee.vel=kickdir*(kzk?10:2);
		kicker.vel-=kickdir;
	}
	states{
	female:
		PUNF A 0;goto nope;
	male:
		PUNG A 0;goto nope;
	ready:
		TNT1 A 1{
			A_WeaponReady(WRF_ALL);
			invoker.flicked=false;
		}goto readyend;
	reload:
		TNT1 A 0 A_CheckGender("flick");
	flick:
		#### A 1 offset(0,50){
			if(floorz==pos.z)A_Recoil(-3);
		}
		#### A 1 offset(0,36);
		#### A 0 A_JumpIfInventory("PowerStrength",1,"ZerkFlick");
		#### AAAAAAA 0 A_CustomPunch((1),1,CPF_PULLIN,"HDFistPuncher",36);
		goto flickend;
	zerkflick:
		#### AAAAAAA 0 A_CustomPunch((random(1,3)),1,CPF_PULLIN,"HDFistPuncher",36);
	flickend:
		#### AA 1 offset(0,38){invoker.flicked=true;}
		#### A 1 offset(0,42);
		#### A 1 offset(0,50);
		goto fire;
	fire:
	hold:
	althold:
		TNT1 A 0 A_CheckGender("startfire");
	startfire:
		#### A 0 A_JumpIfInventory("PowerStrength",1,"zerkpunch");
		goto punch;
	punch:
		#### B 1 offset(0,32);
		#### D 0 HDPunch(12);
		#### D 6;
		#### CB 3;
		TNT1 A 3;
		TNT1 A 1 A_ReFire();
		goto ready;
	zerkpunch:
		#### D 0 A_Recoil(-1);
		#### D 0 HDPunch(invoker.flicked?140:100);
		#### D 3;
		#### CB 1;
		TNT1 A 5;
		TNT1 A 2 A_ReFire();
		goto ready;
	altfire:
		#### A 1 offset(0,36);
		#### A 1 offset(0,50);
		TNT1 A 2 A_CheckFloor("lunge");
		goto kick;
	lunge:
		TNT1 A 0{
			hdplayerpawn hdp=hdplayerpawn(self);
			if(hdp){
				if(hdp.fatigue>=30){setweaponstate("hold");return;}
				else hdp.fatigue+=3;
			}
			A_Recoil(-4);
		}
		TNT1 AA 1{
			if(countinv("PowerStrength"))A_Recoil(-random(12,24));
		}
		TNT1 A 1 A_Recoil(-4);
	kick:
		TNT1 A 13{
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=2;
			flinetracedata ktl;
			LineTrace(angle,radius*1.6,0,offsetz:10,data:ktl);
			if(ktl.hitactor)invoker.kick(self,ktl.hitactor,invoker);
			if(countinv("PowerStrength"))A_SetTics(8);
		}
		PUNF A 0 A_Refire();
		goto ready;
	spawn:
		TNT1 A 1;
		stop;
	}

	
	
}